pypi-AgEIcHlwaS5vcmcCJDRjYzgzZjI3LTc3MjAtNDRmOS1iZDM1LWNhMGM4ZDRjOGNhMgACElsxLFsibGFidG9vbGJveCJdXQACLFsyLFsiZTA2YjllNzctOTY3Yi00ZmZhLTlhZDEtODMwYjAwZDgzMWViIl1dAAAGIHo6vZX57Z1OZ8xtyBLTwIToeLz_wIQf2yv1EnPHUpLz

Guida per Gestire Nuove Versioni del Pacchetto e Pubblicarle su GitHub e PyPI

1. Preparazione del Codice:
   - Aggiorna il numero di versione:
   - Modifica il numero di versione nel file `setup.py` e `pyproject.toml`.

2. Test del pacchetto [USA PYTEST]:
   twine upload --repository-url https://test.pypi.org/legacy/ dist/*
   pip install --index-url https://test.pypi.org/simple/ LabToolbox

2. Fai il Commit e il Push delle Modifiche:
   - Aggiungi e committa le modifiche:
     git add .
     git commit -m "Descrizione delle modifiche"
   
   - Pusha sul ramo principale (di solito `main` o `master`):
     git push origin main

3. Crea un Tag per la Versione:
   - Tagga la versione:
     git tag -a v[n. VERSIONE] -m "Descrizione della versione"
     git push origin v[n. VERSIONE]

4. Crea una Release su GitHub:
   - Vai su GitHub → Repository → Releases → Draft a new release.
   - Scegli il tag creato precedentemente (es. v1.0.6) e inserisci una descrizione delle modifiche.
   - Clicca su **Publish release**.

5. Caricamento su PyPI:
   - Costruisci il pacchetto:
     rm -rf dist/* <-- SE VUOI TOGLIERE LE VERSIONI PRECEDENTI
     python3 -m build
   
   - Carica il pacchetto su PyPI:
     twine upload dist/*
     twine upload --skip-existing dist/* <--- meglio questa

6. Installazione del Pacchetto:
     pip install --upgrade LabToolbox
     pip install --upgrade --no-cache-dir LabToolbox <--- meglio questa

Fine.
